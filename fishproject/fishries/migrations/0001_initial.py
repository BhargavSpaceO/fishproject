# Generated by Django 4.0.3 on 2022-04-06 06:36

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('aadhar_number', models.CharField(max_length=16, unique=True)),
                ('phone_number', models.CharField(help_text='-> Phone number should be of 10 digits <br/> \n    -> Phone number must starts with either 9, 8, 7 or 6 <br/>\n    -> Should enter in this format: 9999955555\n    ', max_length=12, unique=True, validators=[django.core.validators.RegexValidator(message='Phone number must start with either 9, 8, 7 or 6 and should enter in this format: 9999955555', regex='^[6-9]\\d{9}$')])),
                ('alternate_number', models.CharField(help_text='-> Phone number should be of 10 digits <br/> \n    -> Phone number must starts with either 9, 8, 7 or 6 <br/>\n    -> Should enter in this format: 9999955555\n    ', max_length=12, unique=True, validators=[django.core.validators.RegexValidator(message='Phone number must start with either 9, 8, 7 or 6 and should enter in this format: 9999955555', regex='^[6-9]\\d{9}$')])),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('address', models.TextField()),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'Owner Details',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Crew',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=255)),
                ('middle_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('aadhar_number', models.CharField(max_length=16, unique=True)),
                ('phone_number', models.CharField(help_text='-> Phone number should be of 10 digits <br/> \n    -> Phone number must starts with either 9, 8, 7 or 6 <br/>\n    -> Should enter in this format: 9999955555\n    ', max_length=12, unique=True, validators=[django.core.validators.RegexValidator(message='Phone number must start with either 9, 8, 7 or 6 and should enter in this format: 9999955555', regex='^[6-9]\\d{9}$')])),
                ('alternate_number', models.CharField(help_text='-> Phone number should be of 10 digits <br/> \n    -> Phone number must starts with either 9, 8, 7 or 6 <br/>\n    -> Should enter in this format: 9999955555\n    ', max_length=12, unique=True, validators=[django.core.validators.RegexValidator(message='Phone number must start with either 9, 8, 7 or 6 and should enter in this format: 9999955555', regex='^[6-9]\\d{9}$')])),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('address', models.TextField()),
                ('created_at', models.IntegerField()),
                ('updated_at', models.IntegerField()),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='crewcreated_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='crewupdated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Crew',
            },
        ),
        migrations.CreateModel(
            name='Token_Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fishing_lisence_number', models.CharField(max_length=255, verbose_name='license No.')),
                ('location_of_operation', models.CharField(max_length=255)),
                ('date_depature', models.DateField(blank=True, null=True)),
                ('tentative_date', models.DateField(blank=True, null=True)),
                ('quantity_fuel', models.DecimalField(decimal_places=2, max_digits=6)),
                ('quantity_water', models.DecimalField(decimal_places=2, max_digits=6)),
                ('approved', models.BooleanField(default=False, verbose_name='approved')),
                ('created_at', models.IntegerField()),
                ('updated_at', models.IntegerField()),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='tokencreated_by', to=settings.AUTH_USER_MODEL)),
                ('number_of_crew', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fishries.crew')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Owner1', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='tokenupdated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Token Book',
            },
        ),
        migrations.CreateModel(
            name='Boat_Details',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('boat_name', models.CharField(max_length=255)),
                ('boat_number', models.IntegerField()),
                ('lisence_number', models.CharField(max_length=255)),
                ('port_name', models.CharField(max_length=255)),
                ('boat_material', models.CharField(choices=[('W', 'Wood'), ('I', 'Iron'), ('F', 'Fiber')], max_length=255)),
                ('dimension_length', models.DecimalField(decimal_places=4, max_digits=6, verbose_name='length')),
                ('dimension_breadth', models.DecimalField(decimal_places=4, max_digits=6, verbose_name='breadth')),
                ('dimension_depth', models.DecimalField(decimal_places=4, max_digits=6, verbose_name='depth')),
                ('engine_name', models.CharField(max_length=255)),
                ('engine_number', models.IntegerField()),
                ('engine_manufacture_date', models.DateField(blank=True, null=True, verbose_name='Engine MFD')),
                ('engine_horsepower', models.IntegerField()),
                ('created_at', models.IntegerField()),
                ('updated_at', models.IntegerField()),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='boatcreatedby', to=settings.AUTH_USER_MODEL)),
                ('owner_details', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='boatupdatedby', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Boat Details',
            },
        ),
        migrations.CreateModel(
            name='Admin_Token_Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token_number', models.CharField(max_length=25)),
                ('token_book', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='fishries.token_book')),
            ],
        ),
    ]
